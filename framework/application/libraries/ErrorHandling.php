<?php

declare(strict_types=1);

namespace Framework\Application\Libraries;

use \Framework\Config\Config as Config;
use \Framework\Utilities\UtilitiesFramework as UtilitiesFramework;

/**
 * This class provides functions for handling errors generated by the current script
 *
 * It provides custom error handling function
 * It provides functions for saving error to database
 * It provides functions for emailing the error
 *
 * @category   Libraries
 * @author     Nadir Latif <nadir@pakjiddat.pk>
 * @license    https://www.gnu.org/licenses/gpl-2.0.html GNU General Public License, version 2
 */
final class ErrorHandling
{
    /**
     * Custom error handling function
     *
     * Used to handle an error generated by the current script
     * It fetches MySQL query log and server information and adds it to the given error message
     * It saves the error message to database if mentioned in application config
     * It sends the error message by email if mentioned in application config
     * If updates the error message count in application config
     * If too many error emails have been sent, then the script execution is ended
     * It echoes the given error log message intended for the user
     *
     * @param string $log_message the error log message to display to the user
     * @param array $error_parameters the error parameters
     *    error_level => string the error level
     *    error_message => string the error message
     *    error_file => string the error file name
     *    error_line => string the error line number
     *    error_context => string the error context
     *    error_html => string the html error message generated by the ErrorHandler utilities class
     */
    public function CustomErrorHandler(string $log_message, array $error_parameters) : void
    {
        /** The line break is fetched from application config **/
        $line_break                     = Config::$config["general"]["line_break"];
        /** Lines breaks are added to the log message */
        $log_message                    = $log_message . $line_break . $line_break;
        /** The mysql query log and server information is fetched */
        $request_data                   = Config::GetComponent("loghandling")->GetRequestData("all");
        /** The mysql query log is appended to the log message */
        $log_message                    = $log_message . "MySQL query log: " . $line_break . $line_break .         
        $log_message                    .= $request_data['mysql_query_log'];
        
        /** The mysql query log is appended to the html error */
        $error_parameters['error_html'] = $error_parameters['error_html'] . "<b>MySQL query log</b>: <br/><br/>";
        $error_parameters['error_html'] .= nl2br($request_data['mysql_query_log']);

        /** The error message is saved to database if needed */
        if (Config::$config["general"]["log_error_to_database"]) {
            /** The application name is added */
            $error_parameters['app_name'] = Config::$config["general"]["app_name"];
        	/** The error is logged to database */
        	self::LogErrorToDatabase(
        	    $error_parameters,
        	    $request_data['server_data'],
        	    $request_data['mysql_query_log']
        	);
       	}        
       	
       	/** The error message is emailed if needed */
        if (Config::$config["general"]["email_error"]) {
            /** The error email is sent */
            self::EmailError($error_parameters['error_html']);
        }
        
        /** If the application should exit on error then program execution ends */
        if (Config::$config["general"]["exit_on_error"]) {
            /** If the application context is 'web' */
            if (Config::$config["general"]["context"] == "web") {
                /** If the application is in development mode */
                if (!Config::$config["general"]["dev_mode"]) {
                    /** The custom 404 page is displayed */
                    Config::GetComponent("application")->HandlePageNotFound();
                }
                /** The error message is displayed in html format and script ends*/
                die($error_parameters['error_html']);
            }
            /** If the application context is 'cli' */
            else if (Config::$config["general"]["context"] == "cli") {
                /** The error message is displayed in plain text format and script ends*/
                die($log_message);
            }
        }
            
    }
    
	/**
     * This function sends the error html by email
     *
     * @param string $error_html the email html text
     */
    private function EmailError(string $error_html) : void 
    {
        /** The maximum number of errors after which the application should exit */
        $max_error_emails                               = Config::$config["general"]["max_error_emails"];
        /** The error email count */
        $email_count                                    = Config::$config["general"]["error_email_count"];
        /** If the script has sent more than the maximum number of emails, then it ends */
        if ($email_count >= $max_error_emails)
            die("\n\nToo many errors !");
        /** The email count is increased by 1 */
        $email_count                                    = (string) ($email_count+1);
        /** The email count is set */
        Config::$config["general"]["error_email_count"] = $email_count;
        /** The address at which the email should be sent */
        $to_email                                       = Config::$config["general"]["error_email_to"];
        /** The address from which the email should be sent */
        $from_email                                     = Config::$config["general"]["error_email_from"];
        /** The parameters used to send email */
        $parameters                                     = array("params" => array(), "backend" => "mail");
        /** The email is sent to the user */
        UtilitiesFramework::Factory("email", $parameters)->SendEmail(
            $from_email,
        	$to_email,
        	"Pak Php Framework has reported an error !",
        	$error_html
        );
    }

    /**
     * This function formats the error message and saves it to database
     *
     * @param array $error_parameters the error parameters. it contains following keys:
     *    error_level => int the error level
     *    error_type => int [Error,Exception] the error type. it is either Error or Exception
     *    error_message => string the error message
     *    error_file => string the error file name
     *    error_line => int the error line number
     *    error_context => array the error context
     * @param array $server_data the information about the server that sent the error data
     * @param array $mysql_query_log the mysql query log data
     */
    private function LogErrorToDatabase(array $error_parameters, array $server_data, string $mysql_query_log) : void 
    {
        /** The log data */
        $log_data                 = array(
                                        "level" => $error_parameters["error_level"],
                                        "type" => $error_parameters["error_type"],
                                        "message" => $error_parameters["error_message"],
                                        "file" => $error_parameters["error_file"],
                                        "line" => $error_parameters["error_line"],
                                        "details" => $error_parameters["error_details"],
                                        "server_data" => json_encode($server_data),
                                        "db_log" => $mysql_query_log,
                                        "html" => $error_parameters["error_html"],
                                        "app_name" => Config::$config["general"]["app_name"],
                                        "created_on" => time()
                                    );
        
        /** The log data is enclosed in array */
        $log_data                 = array($log_data);
        /** The mysql table name where the error data will be logged */
        $table_name               = Config::$config["general"]["mysql_table_names"]["error_data"];
        /** The parameters for the log manager object */
        $parameters               = array("dbinit" => Config::GetComponent("frameworkdbinit"));
        /** The error data is saved to database */
        UtilitiesFramework::Factory("logmanager", $parameters)->InsertLogData($log_data, $table_name);
    }
    
    /**
     * This function is registered as a shutdown function with the ErrorHandler utilities class
     */
    public function CustomShutdownFunction() : void 
    {
        /** The database connection is closed **/
        Config::GetComponent("frameworkdbinit")->Close();
        /** The database connection is closed **/
        Config::GetComponent("dbinit")->Close();
    }
}
